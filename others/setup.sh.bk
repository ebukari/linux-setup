#!/bin/bash
# Ensure script runs with root privileges
[ "$EUID" -ne 0 ] && exec sudo "$0" "$@"

# ========================
# Utility Functions
# ========================

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Colored output functions
show_info() {
    echo -e "${BLUE}[ℹ] $1${NC}"
}

show_success() {
    echo -e "${GREEN}[✔] $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}[⚠] $1${NC}"
}

show_error() {
    echo -e "${RED}[✖] $1${NC}"
}

show_header() {
    echo -e "${CYAN}"
    echo "========================================"
    echo "          System Setup Utility          "
    echo "========================================"
    echo -e "${NC}"
}

# Simplified progress tracking
start_task() {
    echo -e "${BLUE}[…] $1${NC}"
}

end_task() {
    echo -e "\033[1A\033[2K${GREEN}[✔] $1${NC}"
}

# Error handling
handle_error() {
    show_error "Error in line $1: $2"
    exit 1
}

trap 'handle_error $LINENO "$BASH_COMMAND"' ERR

# ========================
# Package Installation
# ========================

install_packages() {
    show_header
    show_info "Starting package installation..."
    
    local package_file="packages/packages.yaml"
    
    # Verify YAML file exists
    [ ! -f "$package_file" ] && show_error "Package file $package_file not found" && exit 1

    # Get package count using yq
    local package_count=$(yq '.packages | length' "$package_file")
    
    if [ "$package_count" -eq 0 ]; then
        show_warning "No packages found in configuration file"
        return
    fi

    # Read package names safely
    mapfile -t package_names < <(yq -r '.packages[].name' "$package_file")
    
    # Build dialog options
    options=()
    for i in "${!package_names[@]}"; do
        options+=("$i" "${package_names[$i]}" "off")
    done

    # Show dialog with proper argument count validation
    if [ ${#options[@]} -lt 3 ]; then
        show_error "Not enough packages for selection dialog"
        return
    fi

    local selected_packages=$(dialog --no-cancel --keep-tite --stdout \
        --backtitle "Package Selection" \
        --checklist "Select packages to install (${package_count} available):" \
        20 60 15 "${options[@]}")

    [ -z "$selected_packages" ] && show_warning "Package installation cancelled" && return

    local total=$(echo "$selected_packages" | wc -w)
    local current=1

    for index in $selected_packages; do
        local pkg_data=$(yq -r ".packages[$index]" "$package_file")
        name=$(echo "$pkg_data" | yq -r '.name')
        manager=$(echo "$pkg_data" | yq -r '.manager')
        pkg_name=$(echo "$pkg_data" | yq -r '.package_name')
        setup_script=$(echo "$pkg_data" | yq -r '.setup_script')
        custom_installer=$(echo "$pkg_data" | yq -r '.custom_installer')

        start_task "[${current}/${total}] Installing ${name}..."
        
        # Run setup script
        if [ "$setup_script" != "null" ]; then
            start_task "Running setup script"
            bash "packages/setup_scripts/${setup_script##*/}"
            end_task "Setup script completed"
        fi

        # Handle installation
        case "$manager" in
            apt) 
                start_task "Installing via apt"
                apt-get install -y "$pkg_name"
                end_task "apt installation completed"
                ;;
            snap)
                start_task "Installing via snap"
                snap install "$pkg_name"
                end_task "snap installation completed"
                ;;
            custom)
                start_task "Running custom installer"
                bash "packages/custom_installers/${custom_installer##*/}"
                end_task "Custom installation completed"
                ;;
            *) 
                show_error "Unknown package manager: $manager"
                ;;
        esac
        
        end_task "[${current}/${total}] ${name} installed successfully"
        ((current++))
    done
}

# ========================
# System Configuration
# ========================

configure_system() {
    show_header
    show_info "Starting system configuration..."
    
    local config_file="config/config.yaml"
    
    # Verify config file exists
    [ ! -f "$config_file" ] && show_error "Config file $config_file not found" && exit 1

    # Get configuration count
    local config_count=$(yq '.configurations | length' "$config_file")
    
    if [ "$config_count" -eq 0 ]; then
        show_warning "No configurations found in configuration file"
        return
    fi

    # Read configuration names
    mapfile -t config_names < <(yq -r '.configurations[].name' "$config_file")
    
    # Build dialog options
    options=()
    for i in "${!config_names[@]}"; do
        options+=("$i" "${config_names[$i]}" "off")
    done

    # Validate dialog arguments
    if [ ${#options[@]} -lt 3 ]; then
        show_error "Not enough configurations for selection dialog"
        return
    fi

    local selected_configs=$(dialog --no-cancel --keep-tite --stdout \
        --backtitle "Configuration Selection" \
        --checklist "Select configurations to apply (${config_count} available):" \
        25 80 20 "${options[@]}")

    [ -z "$selected_configs" ] && show_warning "Configuration cancelled" && return

    local total=$(echo "$selected_configs" | wc -w)
    local current=1

    for index in $selected_configs; do
        local config_data=$(yq -r ".configurations[$index]" "$config_file")
        name=$(echo "$config_data" | yq -r '.name')
        type=$(echo "$config_data" | yq -r '.type')

        start_task "[${current}/${total}] Applying ${name}..."
        
        case $type in
            "command")
                command=$(echo "$config_data" | yq -r '.command')
                start_task "Executing command"
                eval "$command"
                end_task "Command execution completed"
                ;;
            "file")
                src="config/$(echo "$config_data" | yq -r '.source')"
                dest=$(echo "$config_data" | yq -r '.destination')
                service=$(echo "$config_data" | yq -r '.restart_service')
                
                start_task "Copying configuration file"
                cp "$src" "$dest"
                end_task "File copy completed"
                
                if [ "$service" != "null" ]; then
                    start_task "Restarting service"
                    systemctl restart "$service"
                    end_task "Service restarted"
                fi
                ;;
            "script")
                script_path="config/scripts/$(echo "$config_data" | yq -r '.script')"
                start_task "Running configuration script"
                bash "$script_path"
                end_task "Script execution completed"
                ;;
            "assets")
                src="config/assets/$(echo "$config_data" | yq -r '.files')"
                dest=$(echo "$config_data" | yq -r '.destination')
                start_task "Copying assets"
                cp -r "$src" "$dest"
                end_task "Assets copied"
                ;;
        esac
        
        end_task "[${current}/${total}] ${name} applied successfully"
        ((current++))
    done
}

# ========================
# Main Execution
# ========================

main() {
    show_header
    install_packages
    configure_system
    
    show_success "\nAll operations completed successfully!"
    echo -e "System requires ${YELLOW}reboot${NC} for some changes to take effect."
    read -p "Reboot now? (y/N) " -n 1 -r
    [[ $REPLY =~ ^[Yy]$ ]] && reboot
}

# Start main process
main
