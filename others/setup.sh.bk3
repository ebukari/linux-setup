#!/bin/sh
# POSIX-compliant setup script with output utilities

# ========================
# Output Utilities
# ========================

# Color definitions (POSIX-compliant escape codes)
RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
BLUE=$(printf '\033[34m')
CYAN=$(printf '\033[36m')
BOLD=$(printf '\033[1m')
RESET=$(printf '\033[0m')

show_header() {
    clear
    printf "${CYAN}${BOLD}%s${RESET}\n" "System Setup Utility"
    printf "${CYAN}%s${RESET}\n" "========================================"
}

show_info() {
    printf "${BLUE}==> %s${RESET}\n" "$1"
}

show_success() {
    printf "${GREEN}✓ %s${RESET}\n" "$1"
}

show_warning() {
    printf "${YELLOW}⚠ %s${RESET}\n" "$1"
}

show_error() {
    printf "${RED}✗ Error: %s${RESET}\n" "$1" >&2
}

show_progress() {
    printf "${BLUE}⌛ %s...${RESET}" "$1"
}

show_progress_done() {
    printf "\r${GREEN}✓ %s: Done${RESET}\n" "$1"
}

# ========================
# Dependency Checks
# ========================

check_jq() {
    show_progress "Checking for jq"
    if ! command -v jq >/dev/null 2>&1; then
        show_progress_done "Checking for jq"
        show_warning "jq not found - attempting installation"

        if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y jq
        elif command -v yum >/dev/null 2>&1; then
            yum install -y jq
        elif command -v brew >/dev/null 2>&1; then
            brew install jq
        else
            show_error "Cannot install jq automatically - please install manually"
            exit 1
        fi

        show_success "jq installed successfully"
    else
        show_progress_done "Checking for jq"
    fi
}

# ========================
# Package Installation
# ========================

install_packages() {
    show_header
    show_info "Starting package installation"

    pkg_count=$(jq '.packages | length' packages/packages.json)
    [ "$pkg_count" -eq 0 ] && show_warning "No packages found" && return

    idx=0
    jq -c '.packages[]' packages/packages.json | while IFS= read -r pkg; do
        idx=$((idx+1))
        name=$(echo "$pkg" | jq -r '.name')
        manager=$(echo "$pkg" | jq -r '.manager')
        pkg_name=$(echo "$pkg" | jq -r '.package // ""')
        setup_script=$(echo "$pkg" | jq -r '.setup_script // ""')
        custom_installer=$(echo "$pkg" | jq -r '.custom_installer // ""')

        show_progress "[$idx/$pkg_count] Installing $name"

        # Run setup script
        if [ -n "$setup_script" ]; then
            show_progress "[$idx/$pkg_count] Running setup for $name"
            sh "packages/$setup_script" >/dev/null 2>&1
            show_progress_done "[$idx/$pkg_count] Setup for $name"
        fi

        # Install package
        case "$manager" in
            apt)
                apt-get install -y "$pkg_name" >/dev/null 2>&1
                ;;
            custom)
                sh "packages/$custom_installer" >/dev/null 2>&1
                ;;
            *)
                show_error "Unknown package manager: $manager"
                ;;
        esac

        if [ $? -eq 0 ]; then
            show_progress_done "[$idx/$pkg_count] Installed $name"
        else
            show_error "Failed to install $name"
        fi
    done
}

# ========================
# System Configuration
# ========================

configure_system() {
    show_header
    show_info "Starting system configuration"

    cfg_count=$(jq '.configurations | length' config/config.json)
    [ "$cfg_count" -eq 0 ] && show_warning "No configurations found" && return

    idx=0
    jq -c '.configurations[]' config/config.json | while IFS= read -r cfg; do
        idx=$((idx+1))
        type=$(echo "$cfg" | jq -r '.type')
        name=$(echo "$cfg" | jq -r '.name')

        show_progress "[$idx/$cfg_count] Configuring $name"

        case "$type" in
            command)
                cmd=$(echo "$cfg" | jq -r '.command')
                eval "$cmd" >/dev/null 2>&1
                ;;
            file)
                src=$(echo "$cfg" | jq -r '.source')
                dest=$(echo "$cfg" | jq -r '.destination')
                service=$(echo "$cfg" | jq -r '.restart_service // ""')

                cp "config/$src" "$dest" >/dev/null 2>&1
                [ -n "$service" ] && service "$service" restart >/dev/null 2>&1
                ;;
            *)
                show_error "Unknown config type: $type"
                ;;
        esac

        if [ $? -eq 0 ]; then
            show_progress_done "[$idx/$cfg_count] Configured $name"
        else
            show_error "Failed to configure $name"
        fi
    done
}

# ========================
# Main Execution
# ========================

main() {
    check_jq
    install_packages
    configure_system

    show_header
    show_success "System setup completed successfully"
    printf "%s\n" "You may need to reboot for changes to take effect"
}

# Start main process
main
